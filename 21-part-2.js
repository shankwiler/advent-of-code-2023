const linesReal =
  `...................................................................................................................................
..........#.............#...#........#....#.......#.#..#...........................##......#......#..#.###................#........
...#.#.......#.#......#.......#.........#.........#..#.#...........................................#........#...#.......#....#.#...
..#......#...#.........#...#......##......#.........#...........................#......##......##.....#...##.#....#...#............
......#...........#.............#......#.....#...#.#.#......................#..#...#.#......#..............#.......................
.#..........#.#.#.....................#......#...#.........................#.#...#...##......#.....#..#..........##................
.....#.#......#.........#.........##.....#..##.##..#.......................#.......###.#....#...#...#.......#.#..#.#..........##...
..#..#.....#....#..............................#...............#...................#...#.....#.#......#............................
..#..#........#....##..#.......#......#.#..##.................................#..#..................#................#....#........
.#..#........................#..#.....#.......##..............#............................#...........#.........#........###......
....#....#..#....#...#.........#.....#.#...#..#............#.......#...........##...##.#.#...#.....##..............................
....#..#.........#..#......#.....................##........#.........................#.............#.#....#.................#......
...#.......#......#............#......#...#....#...............#........#...............#...............##..#.#.......#..###..#....
......#..#.....#.....##...#..#.#..........................#..........................#........#.........................#......#...
.#.......##.........#.......#.#........................##..#...#...#.#.#................#..........#......#.......#...##..#..##.##.
..........#.............#.........#...##.................#.............#.#..............#.......##.....#..........#....#...........
.....#.#............#..#.............................#....##.............#...........#....#..........#.......................#.....
...................#................#................##......#.....#...##...#.............#.....#.......#.....................#....
.......#.#.#............#....##....#................#......#.#....#..#......#.#........................#.#...........#.....#.......
.....#.....#...###.......#.......#.#..#.................##.........##...........................##....#...##...........#...........
..#...#.........#...#..................#...........#.......#.#......#...#...................#..#.#..#......#..#.....#...........#..
.#...........#....#.....#.....#........#...........#..#..##...#...........#....##..............##........#...#...............#.#.#.
................#....#..#........#..#.#....................#................#.....#.............#..........#........#.....#..#.....
............................###...##...........#.#.....##....#....##..##...#..................##.........##............#..###......
.#..##........#.#......#...#.##....................#.........................#............................##....#..................
..#.........#..#.........#........................#.....##.............##.....#...............##........#....####..................
...#.#.##........................#.#...........#........##........................#............#.#.....#..........#....#...........
....#....#.....##...........#.....#..........#...#...#..............#...........#...............#...............#.....#....#.......
.#.........#....#.#................................#.....#.....#....#........#.........##.............#..#....#.......#.....#..#...
......##.....#.......#..........#.........#.#.........##....##.#...........##...#.#.......#......................#.................
..............#............#............#..............#.#.........###....#.#.......#.....#.......................#....#....#.#....
............##.....#.#.......#.........#.#..#..#.........#......#....#.....#....#.......................#.....#......#.............
..#.#....#....#.........##..#...................#..#..............#.......#.............................##...............#.........
.#....#...............#...#..........#..........#.........###..#.......#..##........#.#.....#..........#.....#.............#.......
.......#....#..........#.......................#..##.#.............#......................................#..............#...#.....
..#.##..........#............................#.............#..........#....#.......#...#..##.................................#.##..
......#...#..........#......................................#...........#..#.......#......#.#..............................#...#...
.#.#................##............#.......##......................#..#..#.....#.#..........#......................##...............
..#........#........#.............#..........#.....#..................#........#........#.................................#........
.###..##..#........................#.#......#........##.....#.....#......#..#........#.....#.................#...#.......#.........
.......#......#................#......#......##...............#................#....#..#...#....................###.....#.....#....
..#...........#...............................#...##....##...........#.#.#........................#................#......#......#.
....#..#.#...........................#....#.#..............#............#..#..##................#...............#..#..#.......##...
....##.#.......................#.....................#....#...................#.....#...#..............#.........#.#........#..#...
...##..........##........#.....#..........##...#..........................#.........#..#..#......#....................#.....##.....
..#......#...................#..#.##.........#.......#........................#.#.#.........................................#....#.
.#....####................#....#.#..#.#......#................#.....................#.#....#........#..##..........................
...........#.#...........##...............#..........#......................##....#.......#...##.....#....................#..#.....
.#..#................#...................#..#........#.....#.............................#.#...##.....................#........#...
........##..#................#..#....#........#......#..#.............#..........#...........#..............#.........#....#.......
..##....##.#.........#.#........#...........##..###..#.......#..................................#.#......#..#..#............#.##...
...........................#...#..#..##....#...#.......................#.....#...#.................................................
..#..#..#...................#..............................................#..#......#.......#................#.#..........#.......
........#.......##..........#.......#............#.##...............#......#...........#...............#..................###......
.#.#................#.....#..#.#...#...........................#.....#..#..........#...............#.#.............................
..............#.......................#........#.#.................................#.......#...#....#........#.#....#........#.....
..##....................#....#....#.........#..##..........#.......##..................................#..#..##..#...#.............
...#.............#......#....#...##........#......................#.............#......##............#..........##.................
..................##......#.........#....#..........#.#........................##.##.........................##....................
................#........#..#......................#.........#..............#....#...#...#..........................#..............
...................##...##..............#..#..#.#...##.....#.........##...........................#...##.#.........................
............#......#..........#......#..#.....##......#.................#..........#......#...#.........#........##.#..............
.....................#.#........................#...............#......#.#..#.........#....#................#..............#.......
..................#......#.#.....#......#............##.....#.#........#.#........#...#....#.....##..........#...#.................
........#...............................#.......#.........#....#...###......##..#....#.........#..##.........#.....#.......#.......
.................................................................S.................................................................
.....#.#......#.......##.#..#....#..#..#..............#...............#.............##.....#...#.###............#..................
.............#.........#.........#...........##.....#...........#..............#...#.................#.#..................#........
.......#.#...................#..........#..............##....##.............#..........#..#..#.........##..........................
...........#....#..............##........#............#...#....##........#.#....#.#.#...............#...#....#..........#..........
...........##.#.#.#......#........#..#....#...#........................#.............#......##...##..#.#...##........#.............
..#.......##....#...........#..................#....#....#..#.......###......................#.......................#.#...........
..............#......#.#..#...#.#.......................................#.###.................#............#...#...................
............#.........#.#.........##......................#..........#.......#....#.................#........#...#..##...........#.
...............#....#...#......#.....#......#.....#.....#....##...............#...............#....#............#..#...............
....##.........#.#....#.........#.....#.#...........#...............#.....###.........#..............#.....#.......................
..#.#....................#.......#..........#....#...#....#..#......#..#.##...#.#.#..#.#.......................##..............#...
....#..................#...#..#................#..#.#.................##..#..........#....#..............#...#.....................
..#....#...............................#.....#.......#..............##.#......#....#..........#..#....#.#.................#........
......##.......................#.......#.......................#...#......##...#.........#..#.......#...................#..........
...##.#..............#.....#..#.#...#......##.......#.........#.#..............#.....#...#..#...#.........#........................
....##.#......................##.#...#.........#........................#.#.................#......##........#...............#..#..
....#...##...........#.....#................#..#........#....#.............#.#.......................#....................#........
........##........................................#................#......................#................#.........##.#....#...#.
....#......#............#................#..................#........#...#.................#.............#.........#..#.#..........
.#.........#...................................#..............#.#....................#..................................#.#..##..#.
..##..#.##................#............#........#...........................#......###..#.....#..#...#............#.#.#....#.......
..........#........................#..#....###..##...#..............###..............#..#....#.#.##..................#.......#.....
.....#..#....#..............................................#...................#..................#.................#........#..#.
.....#...#.......#..#......................#.#...#.....#..#...#......#..#....#.#..............#.#.....#.......##.#...###......#.#..
...........................................#.#............#....#........#........#...........#.#..............................#....
......#........##..#.............#.#...##..#......................#......#.........#.#....#.................#......................
.#.#...#.#..#.#....##..............##...#......#.#....#....#....#.##...................#...##...#....................#...#.........
.#...#...........#................................#...###.............#.....#.........#....##...#..............#.............#...#.
............#.....................#..#.#..#............#....#...............#.#.......#..##................#............##.........
..#............##.......#.#...........#....#...#.....#.........#...........#..........#......#..........#......#...#....##.........
....#...................................................#.....#...#.................#.......#.#..............#.......#.#.#..##.....
..#.........##.#.#......#..#.........#.#...........##....#.........#...............#..#.......#....................#...............
.#..#...........##.#..........................#...............#.........#.................#............#...#.........#...#.......#.
...........#.................#.............................#............................#...........#.....##..........#...#....#...
....##..............##.....#..#...........#.........#..#.....#..#...............#..........#...............##....#......#........#.
.#...#.....#...........#..................#...#..###....#.........#..........#..#..#....#.#........##.#..##......#..........#......
.....#.#.#......##...#..........#..........#......#....#.................................#...........#...#.......#.............#...
....................#.......#.............#.......#.#....#......#...............#.....#.........#...##...#...............#.#.....#.
.#......#..................................#...........#.#.....#..#..#.....#....#.......................#..#....###..#.....##......
.......#.......#.......#.#..#...............#.#..#..#...#.#.....#.....#............#..#................................#...#.....#.
.#........##...........#.....#.....#...............................##..##...#......................#...........................##..
...............#........#.....#.##............#.#.................#....#.#..........#..........#....................#.........#....
.........................#..#....#..................#......##...............................#..#.....#.#.#................#.#....#.
......#.....................#..#..#..................................#..##....#................#...............#...#.#.............
....#.#.........#.............#.......#............#.....................................#.#.........#...#.......#....#.#..........
...#...##......#.#......#..#..#........###.................#.........#...#.#.............#.#...............#.............#.........
....#.......#.#.....#........#.........#...................#..#.....#....#...............#.........#...#.#.#.....#...........#.....
......#.#..........#..#..................#............................#..##...............##.....#..#..............................
............#.............................#.#...............#...#.....#..#.............#..........#.#...#......................#...
..#.###............................#.....#................#..##...##........#..........##........#........#.#......................
............###..........#..........#......#.............#...#.............#.......#..........#.#.....#......#..........#......#...
...#........#......#.............#.......#.....................#......##.................#.#........#.......................#.#....
.........#...#........#...#...##.#...#....#...#...................#.#.#............#.......#..#........#..#........#...............
.......................#..##.#.#.......#....#....#.....................................##...#........#.......................#.....
...#.##..#................#........................................##............#........#.......###.#.......#......#.#...........
......#....#......#..................#.....#......#.#.................................#.##..#.#.#.............#....#......#........
....##.....#.......##......#.#.....##.#........................#..............#........#..#....#................#.#.#..#....#......
......#.....#......#...#......##...#...........#....#..........................##.#..#..........#..#...............#....##..#...##.
...................#.#.......#.........#........#.................#.........#.......................#...#...#..#....#.#.....##.....
....#..#...#.#.#...#.#........................#........##.................#..........#.#.............#.....#....#..........##...#..
.....................##..........#....#....##...#..#...............................#........#...........#......#..##..#............
....#....##..#...#.......##..#....#..#........#.........................#...#....#.....#..........................#..##..#....#....
.................................#...#..#...#.#......#....#............#.......#......##.#.#.#....#............................#...
.......#.........#........#.###..................#..#.#.........................#.....#............#.............#......#..........
...................................................................................................................................`.split(
    "\n"
  );
(() => {
  const getResult = (maxDist) => {
    /*
    {
    "guess": 305983,
    "homeCount": 9,
    "awayCount": 16,
    "homeCnt": 7568,
    "awayCnt": 7567,
    "maxDist": 589,
    "n": 9,
    "cnt": 305983,
    "topLeftCnt": 917,
    "topLeftAltCnt": 6613,
    "topRightCnt": 934,
    "topRightAltCnt": 6616,
    "botLeftCnt": 939,
    "botLeftAltCnt": 6621,
    "botRightCnt": 909,
    "botRightAltCnt": 6605,
    "topCnt": 5661,
    "botCnt": 5658,
    "leftCnt": 5666,
    "rightCnt": 5653
}*/
    // const topLeftCnt = 917;
    // const topLeftAltCnt = 6613;
    // const topRightCnt = 934;
    // const topRightAltCnt = 6616;
    // const botLeftCnt = 939;
    // const botLeftAltCnt = 6621;
    // const botRightCnt = 909;
    // const botRightAltCnt = 6605;
    // const topCnt = 5661;
    // const botCnt = 5658;
    // const leftCnt = 5666;
    // const rightCnt = 5653;
    // const homeCnt = 7568;
    // const awayCnt = 7567;
    /*
    {
    "topLeftCnt": 963,
    "topLeftAltCnt": 6658,
    "topRightCnt": 947,
    "topRightAltCnt": 6627,
    "botLeftCnt": 952,
    "botLeftAltCnt": 6633,
    "botRightCnt": 955,
    "botRightAltCnt": 6650,
    "topCnt": 5718,
    "botCnt": 5716,
    "leftCnt": 5724,
    "rightCnt": 5710
}*/
    const topLeftCnt = 963;
    const topLeftAltCnt = 6658;
    const topRightCnt = 947;
    const topRightAltCnt = 6627;
    const botLeftCnt = 952;
    const botLeftAltCnt = 6633;
    const botRightCnt = 955;
    const botRightAltCnt = 6650;
    const topCnt = 5718;
    const botCnt = 5716;
    const leftCnt = 5724;
    const rightCnt = 5710;
    const homeCnt = 7567;
    const awayCnt = 7568;

    const n = Math.floor(maxDist / 131) * 2 + 1;
    // 5 + 3 + 1 = sum_n=0 to 2 {2n + 1} = 2 *(2*3/2) + 1 * 3 = 9
    // const rowsAbove = 2 * (((n - 1) * n) / 2);
    // const wholes = 2 * rowsAbove + n;

    const ceil = Math.ceil((n - 2) / 2);
    const floor = Math.floor((n - 2) / 2);

    const insideAcross = n - 2;
    const homeCountAcross =
      (insideAcross + 1) % 4 === 0
        ? Math.floor(insideAcross / 2)
        : Math.ceil(insideAcross / 2);
    const homeCountAbove =
      (Math.max(homeCountAcross - 1, 0) * Math.max(homeCountAcross, 0)) / 2;
    const homeCount = homeCountAcross + homeCountAbove * 2;
    const awayCountAcross = insideAcross - homeCountAcross;
    const awayCountAbove =
      (Math.max(awayCountAcross - 1, 0) * Math.max(awayCountAcross, 0)) / 2;
    const awayCount = awayCountAcross + awayCountAbove * 2;
    // console.log("kylesh oh", {
    //   insideAcross,
    //   homeCountAcross,
    //   homeCountAbove,
    //   homeCount,
    //   awayCountAcross,
    //   awayCountAbove,
    //   awayCount,
    // });

    const guess =
      homeCount * homeCnt +
      awayCount * awayCnt +
      topCnt +
      botCnt +
      leftCnt +
      rightCnt +
      ceil * topLeftCnt +
      floor * topLeftAltCnt +
      ceil * topRightCnt +
      floor * topRightAltCnt +
      ceil * botLeftCnt +
      floor * botLeftAltCnt +
      ceil * botRightCnt +
      floor * botRightAltCnt;

    return guess;
  };

  return getResult(26501365);

  const ret = [];
  const countsByNType = {};
  for (
    let maxDist = 196; // + 131 * 20;
    maxDist <= 327 + 131 * 3; // + 131 * 20;
    maxDist += 131
  ) {
    // for (const maxDist of [6, 10, 50, 100, 500, 1000, 5000]) {
    // const linesReal = document
    //   .querySelector("pre")
    //   .innerText.split("\n")
    //   .filter((e) => !!e);

    const linesSmall = `...........
.....###.#.
.###.##..#.
..#.#...#..
....#.#....
.##..S####.
.##..#...#.
.......##..
.##.#.####.
.##..##.##.
...........`.split("\n");

    const linesBig = `.................................
.....###.#......###.#......###.#.
.###.##..#..###.##..#..###.##..#.
..#.#...#....#.#...#....#.#...#..
....#.#........#.#........#.#....
.##...####..##...####..##...####.
.##..#...#..##..#...#..##..#...#.
.......##.........##.........##..
.##.#.####..##.#.####..##.#.####.
.##..##.##..##..##.##..##..##.##.
.................................
.................................
.....###.#......###.#......###.#.
.###.##..#..###.##..#..###.##..#.
..#.#...#....#.#...#....#.#...#..
....#.#........#.#........#.#....
.##...####..##..S####..##...####.
.##..#...#..##..#...#..##..#...#.
.......##.........##.........##..
.##.#.####..##.#.####..##.#.####.
.##..##.##..##..##.##..##..##.##.
.................................
.................................
.....###.#......###.#......###.#.
.###.##..#..###.##..#..###.##..#.
..#.#...#....#.#...#....#.#...#..
....#.#........#.#........#.#....
.##...####..##...####..##...####.
.##..#...#..##..#...#..##..#...#.
.......##.........##.........##..
.##.#.####..##.#.####..##.#.####.
.##..##.##..##..##.##..##..##.##.
.................................`.split("\n");

    let smallDists;
    let bigDists;
    for (const lines of [linesReal]) {
      const mod = (n, m) => {
        return ((n % m) + m) % m;
      };

      const grid = lines.map((line) => Array.from(line));

      const getValue = (row, col) => {
        return grid[mod(row, grid.length)][mod(col, grid[0].length)];
      };

      const getNearby = (row, col) => {
        const nearby = [];
        for (const [dr, dc] of [
          [-1, 0],
          [1, 0],
          [0, -1],
          [0, 1],
        ]) {
          if (getValue(row + dr, col + dc) === ".") {
            nearby.push([row + dr, col + dc]);
          }
        }
        return nearby;
      };

      let start;

      for (let row = 0; row < grid.length; row++) {
        for (let col = 0; col < grid[0].length; col++) {
          if (grid[row][col] === "S") {
            start = [row, col, 0];
          }
        }
      }

      grid[start[0]][start[1]] = ".";

      const queue = [start];
      let queuePos = 0;
      const getNext = () => {
        if (queuePos === queue.length) {
          return undefined;
        }
        const value = queue[queuePos];
        queuePos++;
        return value;
      };

      // const maxDist = 14;

      const dists = {};

      while (queuePos !== queue.length) {
        const [rowStr, colStr, dist] = getNext();
        const row = parseInt(rowStr);
        const col = parseInt(colStr);
        const key = `${rowStr},${colStr}`;
        if (key in dists) {
          continue;
        }
        dists[key] = dist;
        if (dist === maxDist) {
          continue;
        }
        queue.push(...getNearby(row, col).map((e) => [e[0], e[1], dist + 1]));
      }

      // console.log(
      //   dists
      //     .map((r, ri) =>
      //       r
      //         .map((c, ci) =>
      //           c === maxDist
      //             ? "O"
      //             : c === -1 && grid[ri][ci] === "."
      //             ? "*"
      //             : grid[ri][ci]
      //         )
      //         .join("")
      //     )
      //     .join("\n")
      // );

      // const count = Object.values(dists).filter((c) => mod(c, 2) === 1).length;
      let minRow = Infinity;
      let minCol = Infinity;
      let maxRow = -Infinity;
      let maxCol = -Infinity;
      let kylesh = {};
      for (const key of Object.keys(dists)) {
        const [rowStr, colStr] = key.split(",");
        const row = parseInt(rowStr);
        const col = parseInt(colStr);
        if (mod(row, grid.length) === start[0]) {
          kylesh[row] ??= col;
          kylesh[row] = Math.max(kylesh[row], col);
        }
        if (row < minRow) {
          minRow = row;
        }
        if (col < minCol) {
          minCol = col;
        }
        if (row > maxRow) {
          maxRow = row;
        }
        if (col > maxCol) {
          maxCol = col;
        }
      }
      // console.log("kylesh", kylesh);
      // const out = [];
      // for (let row = minRow; row <= maxRow; row++) {
      //   const outRow = [];
      //   for (let col = minCol; col <= maxCol; col++) {
      //     if (row === start[0] && col === start[1]) {
      //       outRow.push("S");
      //     } else {
      //       if (!(`${row},${col}` in dists)) {
      //         outRow.push(getValue(row, col));
      //       } else {
      //         outRow.push(mod(dists[`${row},${col}`], 2) ? "O" : ",");
      //       }
      //     }
      //   }
      //   out.push(outRow);
      // }
      // copy(out.map((e) => e.join("")).join("\n"));

      let cnt = 0;
      for (let row = minRow; row <= maxRow; row++) {
        for (let col = minCol; col <= maxCol; col++) {
          if (
            `${row},${col}` in dists &&
            mod(dists[`${row},${col}`], 2) === 1
          ) {
            cnt++;
          }
        }
      }

      const startRow = -131 * Math.floor(maxDist / 131);

      let topLeftCnt = 0;
      for (let row = startRow; row < startRow + 131; row++) {
        for (let col = -131; col < 0; col++) {
          const key = `${row},${col}`;
          if (key in dists && mod(dists[key], 2) === 1) {
            topLeftCnt++;
          }
        }
      }

      let topLeftAltCnt = 0;
      for (let row = startRow + 131; row < startRow + 2 * 131; row++) {
        for (let col = -131; col < 0; col++) {
          const key = `${row},${col}`;
          if (key in dists && mod(dists[key], 2) === 1) {
            topLeftAltCnt++;
          }
        }
      }

      let topRightCnt = 0;
      for (let row = startRow; row < startRow + 131; row++) {
        for (let col = 131; col < 131 * 2; col++) {
          const key = `${row},${col}`;
          if (key in dists && mod(dists[key], 2) === 1) {
            topRightCnt++;
          }
        }
      }

      let topRightAltCnt = 0;
      for (let row = startRow + 131; row < startRow + 2 * 131; row++) {
        for (let col = 131; col < 131 * 2; col++) {
          const key = `${row},${col}`;
          if (key in dists && mod(dists[key], 2) === 1) {
            topRightAltCnt++;
          }
        }
      }

      const botStartRow = 131 * Math.floor(maxDist / 131);

      let botLeftCnt = 0;
      for (let row = botStartRow; row < botStartRow + 131; row++) {
        for (let col = -131; col < 0; col++) {
          const key = `${row},${col}`;
          if (key in dists && mod(dists[key], 2) === 1) {
            botLeftCnt++;
          }
        }
      }

      let botLeftAltCnt = 0;
      for (let row = botStartRow - 131; row < botStartRow; row++) {
        for (let col = -131; col < 0; col++) {
          const key = `${row},${col}`;
          if (key in dists && mod(dists[key], 2) === 1) {
            botLeftAltCnt++;
          }
        }
      }

      let botRightCnt = 0;
      for (let row = botStartRow; row < botStartRow + 131; row++) {
        for (let col = 131; col < 131 * 2; col++) {
          const key = `${row},${col}`;
          if (key in dists && mod(dists[key], 2) === 1) {
            botRightCnt++;
          }
        }
      }

      let botRightAltCnt = 0;
      for (let row = botStartRow - 131; row < botStartRow; row++) {
        for (let col = 131; col < 131 * 2; col++) {
          const key = `${row},${col}`;
          if (key in dists && mod(dists[key], 2) === 1) {
            botRightAltCnt++;
          }
        }
      }

      let topCnt = 0;
      for (let row = startRow; row < startRow + 131; row++) {
        for (let col = 0; col < 131; col++) {
          const key = `${row},${col}`;
          if (key in dists && mod(dists[key], 2) === 1) {
            topCnt++;
          }
        }
      }

      let leftCnt = 0;
      for (let row = 0; row < 131; row++) {
        for (
          let col = -131 * Math.floor(maxDist / 131);
          col < -131 * Math.floor(maxDist / 131) + 131;
          col++
        ) {
          const key = `${row},${col}`;
          if (key in dists && mod(dists[key], 2) === 1) {
            leftCnt++;
          }
        }
      }

      let rightCnt = 0;
      for (let row = 0; row < 131; row++) {
        for (
          let col = 131 * Math.floor(maxDist / 131);
          col < 131 * Math.floor(maxDist / 131) + 131;
          col++
        ) {
          const key = `${row},${col}`;
          if (key in dists && mod(dists[key], 2) === 1) {
            rightCnt++;
          }
        }
      }

      let botCnt = 0;
      for (let row = botStartRow; row < botStartRow + 131; row++) {
        for (let col = 0; col < 131; col++) {
          const key = `${row},${col}`;
          if (key in dists && mod(dists[key], 2) === 1) {
            botCnt++;
          }
        }
      }

      let homeCnt = 0;
      for (let row = 0; row < 131; row++) {
        for (let col = 0; col < 131; col++) {
          const key = `${row},${col}`;
          if (key in dists && mod(dists[key], 2) === 1) {
            homeCnt++;
          }
        }
      }

      let awayCnt = 0;
      for (let row = 0; row < 131; row++) {
        for (let col = 131; col < 131 * 2; col++) {
          const key = `${row},${col}`;
          if (key in dists && mod(dists[key], 2) === 1) {
            awayCnt++;
          }
        }
      }

      // let bottomMiddleCnt = 0;
      // for (let row = 131; row < 131 * 2; row++) {
      //   for (let col = 0; col < 131; col++) {
      //     const key = `${row},${col}`;
      //     if (key in dists && mod(dists[key], 2) === 1) {
      //       bottomMiddleCnt++;
      //     }
      //   }
      // }

      // let middleCnt = 0;
      // for (let row = 0; row < 131; row++) {
      //   for (let col = 0; col < 131; col++) {
      //     const key = `${row},${col}`;
      //     if (key in dists && mod(dists[key], 2) === 1) {
      //       middleCnt++;
      //     }
      //   }
      // }

      // let topLeftOut = [];
      // for (let row = startRow; row < startRow + 131; row++) {
      //   const topLeftRow = [];
      //   for (let col = -131; col < 0; col++) {
      //     if (!(`${row},${col}` in dists)) {
      //       topLeftRow.push(getValue(row, col));
      //     } else {
      //       topLeftRow.push(mod(dists[`${row},${col}`], 2) ? "O" : ",");
      //     }
      //   }
      //   topLeftOut.push(topLeftRow);
      // }
      const answer = (() => {
        const n = Math.floor(26501365 / 131) * 2 + 1;

        const ceil = Math.ceil((n - 2) / 2);
        const floor = Math.floor((n - 2) / 2);

        const insideAcross = n - 2;
        const homeCountAcross =
          (insideAcross + 1) % 4 === 0
            ? Math.floor(insideAcross / 2)
            : Math.ceil(insideAcross / 2);
        const homeCountAbove =
          (Math.max(homeCountAcross - 1, 0) * Math.max(homeCountAcross, 0)) / 2;
        const homeCount = homeCountAcross + homeCountAbove * 2;
        const awayCountAcross = insideAcross - homeCountAcross;
        const awayCountAbove =
          (Math.max(awayCountAcross - 1, 0) * Math.max(awayCountAcross, 0)) / 2;
        const awayCount = awayCountAcross + awayCountAbove * 2;

        const guess =
          homeCount * homeCnt +
          awayCount * awayCnt +
          topCnt +
          botCnt +
          leftCnt +
          rightCnt +
          ceil * topLeftCnt +
          floor * topLeftAltCnt +
          ceil * topRightCnt +
          floor * topRightAltCnt +
          ceil * botLeftCnt +
          floor * botLeftAltCnt +
          ceil * botRightCnt +
          floor * botRightAltCnt;

        return guess;
      })();

      // copy(topLeftOut.map((e) => e.join("")).join("\n"));
      const n = Math.floor(maxDist / 131) * 2 + 1;
      // 5 + 3 + 1 = sum_n=0 to 2 {2n + 1} = 2 *(2*3/2) + 1 * 3 = 9
      // const rowsAbove = 2 * (((n - 1) * n) / 2);
      // const wholes = 2 * rowsAbove + n;

      const ceil = Math.ceil((n - 2) / 2);
      const floor = Math.floor((n - 2) / 2);

      const insideAcross = n - 2;
      const homeCountAcross =
        (insideAcross + 1) % 4 === 0
          ? Math.floor(insideAcross / 2)
          : Math.ceil(insideAcross / 2);
      const homeCountAbove =
        (Math.max(homeCountAcross - 1, 0) * Math.max(homeCountAcross, 0)) / 2;
      const homeCount = homeCountAcross + homeCountAbove * 2;
      const awayCountAcross = insideAcross - homeCountAcross;
      const awayCountAbove =
        (Math.max(awayCountAcross - 1, 0) * Math.max(awayCountAcross, 0)) / 2;
      const awayCount = awayCountAcross + awayCountAbove * 2;
      // console.log("kylesh oh", {
      //   insideAcross,
      //   homeCountAcross,
      //   homeCountAbove,
      //   homeCount,
      //   awayCountAcross,
      //   awayCountAbove,
      //   awayCount,
      // });

      const guess =
        homeCount * homeCnt +
        awayCount * awayCnt +
        topCnt +
        botCnt +
        leftCnt +
        rightCnt +
        ceil * topLeftCnt +
        floor * topLeftAltCnt +
        ceil * topRightCnt +
        floor * topRightAltCnt +
        ceil * botLeftCnt +
        floor * botLeftAltCnt +
        ceil * botRightCnt +
        floor * botRightAltCnt;

      // const segmented = {};
      // for (const [key, value] of Object.entries(dists)) {
      //   if (mod(value, 2) === 1) {
      //     const split = key.split(",");
      //     const row = parseInt(split[0]);
      //     const col = parseInt(split[1]);
      //     const groupRow = Math.floor(row / 131);
      //     const groupCol = Math.floor(col / 131);
      //     const groupKey = `${groupRow},${groupCol}`;
      //     segmented[groupKey] ??= 0;
      //     segmented[groupKey]++;
      //   }
      // }

      const res = {
        // segmented,
        guess,
        homeCount,
        awayCount,
        homeCnt,
        awayCnt,
        maxDist,
        n,
        cnt,
        topLeftCnt,
        topLeftAltCnt,
        topRightCnt,
        topRightAltCnt,
        botLeftCnt,
        botLeftAltCnt,
        botRightCnt,
        botRightAltCnt,
        topCnt,
        botCnt,
        leftCnt,
        rightCnt,
      };

      console.log(maxDist, n, guess, cnt, getResult(maxDist), res);
      if (maxDist === 327) {
        // return answer;
      }
      const countsByNTypeKey = (n + 1) % 4 === 0 ? "first" : "second";
      countsByNType[countsByNTypeKey] ??= [];
      countsByNType[countsByNTypeKey].push({
        topLeftCnt,
        topLeftAltCnt,
        topRightCnt,
        topRightAltCnt,
        botLeftCnt,
        botLeftAltCnt,
        botRightCnt,
        botRightAltCnt,
        topCnt,
        botCnt,
        leftCnt,
        rightCnt,
        homeCnt,
        awayCnt,
      });
      // console.log({ count, dists, kylesh });
      // for (const [key, val] of Object.entries(dists)) {
      //   const [row, col] = key.split(',');
      //   if (mod(row, 11) === 5 && mod(col, 11) === 5) {
      //     console.log(row, col, val)
      //   }
      // }
      // if (lines === linesSmall) {
      //   smallDists = dists;
      // } else {
      //   bigDists = dists;
      // }
    }
  }
  return countsByNType;
})();

/*
left and right take 15
up and down take 21
top right and bottom left take 22
top left and bottom right take 26

row 5+11*20 = 225 and col 5+11*31=346 is ???
let's say you took 1000 steps. You will have gone
- 1000 / 15 left and right = 133 blocks + 1 inital
- 1000/ 21 up and down
*/

/*
Get rid of the initial 65, that just gets you to the edge, then each extra 131 gets you to the next edge

So, 65, you get 1 + (0 extra)
196 = 1 + ((196 - 65) / 131) * 2 extra

163701969201 too low
619407302295151 too low

3751 *163701969201 = 614046086472951 is too low

619407302699750 was not right*/

/*
complete: 7568
expected for three diamond across: 7568 * 4 = 30272, should be 34253
actual for three diamond across

for five across: (d + (x - a - b) + c) + (c + (x -a) + x + (x - b) + d) + ((x - a - c) + x + x + x + (x - b - d)) + (b + (x - c) + x + (x - d) + a) + (b + (x - c - d) + a)
  = -a - b - c - d + 13 x

expected five across: 7568 * 12 = 90816, should be 94327

10 + 8 + 6 + 4  2 + 0 = sum_n=0 to 5 { 2n } = 2 * ((5)*6/2) = 30
11 + 9 + 7 + 5 + 3 + 1 = sum_n=0 to 5 {2n+1} = 2 * (5*6/2) + 1* 6 = 36
5 + 3 + 1 = sum_n=0 to 2 {2n + 1} = 2 *(2*3/2) + 1 * 3 = 9
*/
